/*
 * -------------------------------------------------
 *  Nextflow config file for running at Garvan SGE
 * -------------------------------------------------
 * Use as follows:
 * nextflow run wescnv -profile garvan
 */

params {
  config_profile_name = 'Garvan profile'
  config_profile_description = 'Parameters to enable running on Garvan SGE'
  max_cpus = 8
  max_memory = 32.GB
  max_time = 24.h
}

/*
env {
  ref_fasta = "\${TMPDIR}/Homo_sapiens_assembly38.fasta"
  ref_fasta_index = "\${TMPDIR}/Homo_sapiens_assembly38.fasta.fai"
  target_bed = "\${TMPDIR}/Agilent_V5_targets-MAP100-GC-GC500-WD-M.bed"
  target_txt = "\${TMPDIR}/Agilent_V5_targets-MAP100-GC-GC500-WD-M.txt"
  probe_bed = "\${TMPDIR}/Agilent_V5_probes.bed"
}
*/

executor {
  queueSize = 300
  pollInterval = '20s'
  submitRateLimit = '300/1min'
}

cleanup = false

docker {
  enabled=false
}

singularity {
      enabled = true
      runOptions = '--bind "\$TMPDIR" --bind "/share/" --bind "/paella/CRAMPipeline/projects/Glucoma"'
      cacheDir = "/share/ClusterShare/software/contrib/jossch/singularity_images/"
}

process {
    executor = 'sge'
    penv = 'smp'
    queue = 'short.q'
    errorStrategy = 'retry'
    maxRetries = 2
    scratch = true
    stageInMode = 'copy'
    stageOutMode = 'rsync'
    withName: cramCoverage {
      container = '/share/ClusterShare/software/contrib/jossch/singularity_images/mosdepth:0.3.2'
    }

    withName: cramCounts {
      container = '/share/ClusterShare/software/contrib/jossch/singularity_images/hts_nim_tools:0.2.0'
    }

    withLabel: bamTasks {
      cpus = 2
      clusterOptions = { "-S /bin/bash -V -j yes  -o output.log -l h_vmem=4G,mem_requested=4G,tmp_requested=15G,tmpfree=15G,h_rt=00:30:00" }
    }

    withLabel: combineTasks {
      container ='/share/ClusterShare/software/contrib/jossch/singularity_images/counts_to_matrix:0.0.1'
      cpus = 1
      clusterOptions = { "-S /bin/bash -V -j yes  -o output.log -l h_vmem=24G,mem_requested=24G,tmp_requested=15G,tmpfree=15G,h_rt=02:00:00" }
    }

    withName: defineProcessGroups {
      container ='/share/ClusterShare/software/contrib/jossch/singularity_images/r_fnn:1.1.3'
      cpus = { check_max( 2 * task.attempt, 'cpus' ) }
      time = { check_max( 8.h * task.attempt, 'time' ) }

      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'

      clusterOptions = { "-S /bin/bash -V -j yes  -o output.log -l h_vmem=24G,mem_requested=24G,tmp_requested=15G,tmpfree=15G" }
    }

    withName: defineProcessGroups {
      container ='/share/ClusterShare/software/contrib/jossch/singularity_images/r_fnn:1.1.3'
      cpus = { check_max( 2 * task.attempt, 'cpus' ) }
      time = { check_max( 8.h * task.attempt, 'time' ) }

      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'

      clusterOptions = { "-S /bin/bash -V -j yes  -o output.log -l h_vmem=24G,mem_requested=24G,tmp_requested=15G,tmpfree=15G" }
    }

    withName: prepareXhmmInput {
      container ='/share/ClusterShare/software/contrib/jossch/singularity_images/r_fnn:1.1.3'
      time = { check_max( 2.h * task.attempt, 'time' ) }

      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'

      clusterOptions = { "-S /bin/bash -V -j yes  -o output.log -l h_vmem=24G,mem_requested=24G,tmp_requested=10G,tmpfree=10G" }
    }

    withName: runXhmm {
      container ='/share/ClusterShare/software/contrib/jossch/singularity_images/xhmm:1.0.0'
      time = { check_max( 8.h * task.attempt, 'time' ) }

      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'

      clusterOptions = { "-S /bin/bash -V -j yes  -o output.log -l h_vmem=8G,mem_requested=8G,tmp_requested=10G,tmpfree=10G" }
    }

    withName: runExomeDepth {
      container ='/share/ClusterShare/software/contrib/jossch/singularity_images/exomedepth:1.1.15'
      time = { check_max( 3.h * task.attempt, 'time' ) }
      cpus = 1
      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'

      clusterOptions = { "-S /bin/bash -V -j yes  -o output.log -l h_vmem=16G,mem_requested=16G,tmp_requested=5G,tmpfree=5G" }
    }

    withName: runExomeDepthXchr {
      container ='/share/ClusterShare/software/contrib/jossch/singularity_images/exomedepth:1.1.15'
      time = { check_max( 1.h * task.attempt, 'time' ) }
      cpus = 1
      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'

      clusterOptions = { "-S /bin/bash -V -j yes  -o output.log -l h_vmem=12G,mem_requested=12G,tmp_requested=5G,tmpfree=5G" }
    }

    withName: cnvKitTargetCoverage {
      container ='/share/ClusterShare/software/contrib/jossch/singularity_images/mosdepth:0.3.2'
      time = { check_max( 1.h * task.attempt, 'time' ) }
      cpus = 2
      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'

      clusterOptions = { "-S /bin/bash -V -j yes  -o output.log -l h_vmem=8G,mem_requested=8G,tmp_requested=15G,tmpfree=15G" }
    }

    withName: cnvKitAntiTargetCoverage {
      container ='/share/ClusterShare/software/contrib/jossch/singularity_images/mosdepth:0.3.2'
      time = { check_max( 1.h * task.attempt, 'time' ) }
      cpus = 2
      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'

      clusterOptions = { "-S /bin/bash -V -j yes  -o output.log -l h_vmem=8G,mem_requested=8G,tmp_requested=15G,tmpfree=15G" }
    }

    withName: makeCnvKitSampleRefpairs {
      container ='/share/ClusterShare/software/contrib/jossch/singularity_images/mosdepth:0.3.2'
      cpus=1
      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'
      time=10.m
      clusterOptions = { "-S /bin/bash -V -j yes  -o output.log -l h_vmem=1G,mem_requested=1G,tmp_requested=2G,tmpfree=2G" }
    }
}


